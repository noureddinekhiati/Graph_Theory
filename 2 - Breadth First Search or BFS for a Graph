
#include<iostream> 
#include <list> 

using namespace std; 

class Graph 
{ 
	int V;
	list<int> *adj; 
public: 
	Graph(int V); 

 
	void add(int v, int w); 

	void BFS(int s); 
}; 

Graph::Graph(int V) 
{ 
	this->V = V; 
	adj = new list<int>[V]; 
} 

void Graph::add(int v, int w) 
{ 
	adj[v].push_back(w); // Add w to vâ€™s list. 
} 

void Graph::BFS(int s) 
{ 
	bool *visited = new bool[V]; 
	for(int i = 0; i < V; i++) 
		visited[i] = false; 

	list<int> queue; 

	visited[s] = true; 
	queue.push_back(s); 

	list<int>::iterator i; 

	while(!queue.empty()) 
	{ 
		// Dequeue a vertex from queue and print it 
		s = queue.front(); 
		cout << s << " "; 
		queue.pop_front(); 

		// Get all adjacent vertices of the dequeued 
		// vertex s. If a adjacent has not been visited, 
		// then mark it visited and enqueue it 
		for (i = adj[s].begin(); i != adj[s].end(); ++i) 
		{ 
			if (!visited[*i]) 
			{ 
				visited[*i] = true; 
				queue.push_back(*i); 
			} 
		} 
	} 
} 

int main() 
{ 
	Graph gr(4); 
	gr.add(0, 1); 
	gr.add(0, 2); 
	gr.add(1, 2); 
	gr.add(2, 0); 
	gr.add(2, 3); 
	gr.add(3, 3); 

	cout << "Following is Breadth First Traversal "
		<< "(starting from vertex 1) \n"; 
	g.BFS(1); 

	return 0; 
} 
